Lab 1: Fetch Weather Data Using OpenWeatherMap API
import requests
import pandas as pd
import os


API_KEY = "your_api_key"
BASE_URL = "https://api.openweathermap.org/data/2.5/weather"


def get_weather(city_name):
    """Fetch weather data for a given city."""
    try:
        params = {"q": city_name, "appid": API_KEY, "units": "metric"}
        response = requests.get(BASE_URL, params=params)
        response.raise_for_status()
        data = response.json()


        return (
            data["name"],
            data["main"]["temp"],
            data["main"]["humidity"],
            data["weather"][0]["description"].capitalize()
        )
    except requests.exceptions.HTTPError as err:
        print(f"Error: {response.json().get('message', str(err))}")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
    return None


def save_to_csv(data):
    """Save weather data to a CSV file."""
    file_name = "weather_data.csv"
    df = pd.DataFrame([data], columns=["City", "Temperature (°C)", "Humidity (%)", "Weather Description"])
    if os.path.isfile(file_name):
        df.to_csv(file_name, mode='a', header=False, index=False)
    else:
        df.to_csv(file_name, index=False)
    print(f"Saved to {file_name}.")


if __name__ == "__main__":
    city = input("Enter city name: ").strip()
    if city:
        weather = get_weather(city)
        if weather:
            print(f"\nCity: {weather[0]}")
            print(f"Temperature: {weather[1]}°C")
            print(f"Humidity: {weather[2]}%")
            print(f"Weather: {weather[3]}")
            save_to_csv(weather)
        else:
            print("Failed to fetch weather data.")
    else:
        print("City name cannot be empty!")





Lab 2: Fetch News Articles and Analyze Sentiment
import requests
import json
import os
from nltk.sentiment import SentimentIntensityAnalyzer
import nltk


nltk.download("vader_lexicon")


API_KEY = "your_api_key"
BASE_URL = "https://newsdata.io/api/1/latest"


def fetch_news(country_code):
    try:
        params = {"country": country_code, "apikey": API_KEY}
        response = requests.get(BASE_URL, params=params)
        data = response.json()


        articles = []
        for article in data.get("results", []):
            articles.append({"title": article.get("title"), "description": article.get("description")})
        return articles
    except Exception as e:
        print(f"Error: {e}")
        return []


def analyze_sentiment(articles):
    sia = SentimentIntensityAnalyzer()
    for article in articles:
        combined_text = (article["title"] or "") + " " + (article["description"] or "")
        scores = sia.polarity_scores(combined_text)
        article["sentiment_score"] = scores["compound"]


        # Assign sentiment label
        if scores["compound"] >= 0.05:
            article["sentiment"] = "Positive"
        elif scores["compound"] <= -0.05:
            article["sentiment"] = "Negative"
        else:
            article["sentiment"] = "Neutral"
    return articles


def save_to_json(articles, file_name="news_sentiment.json"):
    with open(file_name, "w") as file:
        json.dump(articles, file, indent=4)
    print(f"Saved sentiment analysis results to {file_name}")


if __name__ == "__main__":
    country_code = "NP"  # For Nepal
    news_articles = fetch_news(country_code)
    if news_articles:
        analyzed_articles = analyze_sentiment(news_articles)
        save_to_json(analyzed_articles)
    else:
        print("No news articles found!")


Lab 3: Fetch Currency Exchange Rates
import requests
import pandas as pd
import os


# Replace with your ExchangeRate-API key
API_KEY = "your_api_key"
BASE_URL = f"https://v6.exchangerate-api.com/v6/{API_KEY}/latest/USD"


# Fetch exchange rates
def fetch_exchange_rates():
    try:
        response = requests.get(BASE_URL)
        data = response.json()
        if data["result"] == "success":
            rates = data["conversion_rates"]
            return {
                "EUR": rates["EUR"],
                "GBP": rates["GBP"],
                "INR": rates["INR"],
                "NPR": rates["NPR"]
            }
        else:
            print("Error fetching exchange rates!")
            return None
    except Exception as e:
        print(f"Error: {e}")
        return None


# Save to CSV
def save_to_csv(rates, file_name="exchange_rates.csv"):
    new_data = pd.DataFrame([rates])
   
    # Append data if file exists
    if os.path.isfile(file_name):
        old_data = pd.read_csv(file_name)
        new_data.to_csv(file_name, mode="a", header=False, index=False)
        compare_rates(old_data, new_data)
    else:
        new_data.to_csv(file_name, index=False)
    print(f"Saved exchange rates to {file_name}.")


# Compare new and old rates
def compare_rates(old_data, new_data):
    print("Comparison of exchange rates:")
    for col in new_data.columns:
        old_rate = float(old_data.iloc[-1][col])
        new_rate = new_data[col].iloc[0]
        diff = new_rate - old_rate
        print(f"{col}: {new_rate} (Change: {diff:.2f})")


if __name__ == "__main__":
    rates = fetch_exchange_rates()
    if rates:
        print("Today's Rates:")
        for k, v in rates.items():
            print(f"{k}: {v}")
        save_to_csv(rates)
    else:
        print("Could not fetch rates.")

